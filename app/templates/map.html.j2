{% extends "page.html.j2" %}

{% block styles %}
<link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
>
<link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/@drustack/leaflet.resetview/dist/L.Control.ResetView.min.css"
>
<link
    rel="stylesheet"
    href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"
>
<link
    rel="stylesheet"
    href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css"
>
<style>
#map {
    height: 550px;
    max-width: 700px;
    width: 90%;
    margin: auto;
    z-index: 2;
}

#map .user-marker {
    border-radius: 50%;
    border: 1px solid rgba(0, 0, 0, 0.3);
}
</style>
{% endblock styles %}

{% block content %}

<div id="map"></div>

{% endblock content %}

{% block scripts %}
<script
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""
></script>
<script
    src="https://cdn.jsdelivr.net/npm/@drustack/leaflet.resetview/dist/L.Control.ResetView.min.js"
></script>
<script
    src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"
></script>
<script src="https://unpkg.com/topojson@3"></script>
<script>
    const defaultLatLng = [46.45, 2.21];
    const defaultZoom = 6;
    const autoSpiderfyZoom = 10;
    // const tileLayer = "https://tile.openstreetmap.org/{z}/{x}/{y}.png";
    // const tileLayer = "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}.png";
    // const tileLayer = "https://tile.jawg.io/jawg-sunny/{z}/{x}/{y}{r}.png?access-token={{ config.MAP_ACCESS_TOKEN }}";
    const tileLayer = "https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png";

    const users = {{ user_points | tojson }};

    const UserIcon = L.Icon.extend({
        options: {
            iconSize: [32, 32],
            className: 'user-marker',
        }
    });

    const userGroup = L.markerClusterGroup({
        maxClusterRadius: 20,
    });

    // https://gist.github.com/hpfast/2fb8de57c356d8c45ce511189eec5d6a
    L.TopoJSON = L.GeoJSON.extend({
        addData: function (data) {
            var geojson, key;
            if (data.type === "Topology") {
                for (key in data.objects) {
                    if (data.objects.hasOwnProperty(key)) {
                    geojson = topojson.feature(data, data.objects[key]);
                    L.GeoJSON.prototype.addData.call(this, geojson);
                    }
                }
                return this;
            }
            L.GeoJSON.prototype.addData.call(this, data);
            return this;
        }
    });

    L.topoJson = function (data, options) {
        return new L.TopoJSON(data, options);
    };

    onLoad(() => {
        const map = L.map('map');

        map.attributionControl.setPrefix(false);
        map.setMaxBounds([
            [-90, -180],
            [90, 190],
        ]);
        map.setView(defaultLatLng, defaultZoom);
        L.tileLayer(tileLayer, {
            minZoom: 2,
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        L.control.resetView({
            position: "topleft",
            title: "Reset view",
            latlng: L.latLng(defaultLatLng),
            zoom: defaultZoom,
        }).addTo(map);

        for (const point of users) {
            const marker = L.marker(
                [point.latitude, point.longitude],
                {
                    icon: new UserIcon({iconUrl: point.icon,})
                }
            );
            marker.bindPopup(
                `<a href="${point.link}">${point.name}</a><br>${point.location}`
            );
            marker.addTo(userGroup)
        }
        userGroup.addTo(map);

        // Tried to use zoomend event but seemed to be triggered before the
        // plugin re-calculates the clusters, so they were always closed
        setInterval(() => {
            const zoom = map.getZoom();
            if (zoom >= autoSpiderfyZoom) {
                userGroup._gridClusters[zoom].eachObject((cluster) => {
                    cluster.spiderfy();
                });
            }
        }, 500);

        const region = L.topoJson(null, {
            style: function(feature) {
                return {
                    color: 'black',
                    opacity: 0.1,
                    weight: 1,
                    fillColor: 'blue',
                    fillOpacity: 0,
                    }
                },
                onEachFeature: function(feature, layer) {
                    layer.bindPopup(`${feature.properties.dep} - ${feature.properties.libgeo}`);
                }
        }).addTo(map);

        async function loadRegions() {
            const response = await fetch('{{ url_for("static", filename="data/regions.topojson") }}');
            const data = await response.json();

            // remove Droms
            data.features = data.features.filter((feature) => feature.properties.dep < 900);

            region.addData(data);
        }
        loadRegions();
});
</script>
{% endblock scripts %}
